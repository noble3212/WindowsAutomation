import scapy.all as scapy
import random
import re
import logging
import time

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Known list of suspicious domains (example, you can expand this list)
botnet_domains = [
    "example-botnet.com",
    "malicious-domain.xyz",
    "phishing-domain.net",
]

# Function to check if a domain looks suspicious (e.g., random characters or matches botnet domains)
def is_suspicious_domain(domain):
    # Check if the domain is in the list of known botnet domains
    if domain.lower() in botnet_domains:
        return True
    
    # Check if the domain looks like it could be generated by a DGA
    # Simple heuristic: if the domain has a large number of random characters or unusual structure.
    # Note: This is a simplified check; DGA detection could be more sophisticated with ML models.
    if len(domain) > 10 and re.match(r'^[a-z0-9]{10,}$', domain):
        return True

    return False

# Function to detect DNS packets and analyze them
def dns_packet_handler(packet):
    if packet.haslayer(scapy.DNSQR):  # Check if it's a DNS query
        domain = packet[scapy.DNSQR].qname.decode()
        logger.info(f"DNS Query: {domain}")

        # Check if the domain is suspicious
        if is_suspicious_domain(domain):
            logger.warning(f"Suspicious DNS Query Detected: {domain}")
            # You can implement additional actions here, such as sending an alert or blocking traffic

# Start sniffing DNS queries on the network
def start_dns_sniffing():
    logger.info("Starting DNS packet sniffing...")
    scapy.sniff(filter="udp port 53", prn=dns_packet_handler, store=False)

# Main function to execute the botnet detection
def main():
    start_dns_sniffing()

if __name__ == "__main__":
    main()
